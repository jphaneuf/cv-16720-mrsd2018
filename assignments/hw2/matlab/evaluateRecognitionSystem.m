%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% evaluateRecognitionSystem.m
% This script evaluates nearest neighbour recognition system on test images
% load traintest.mat and classify each of the test_imagenames files.
% Report both accuracy and confusion matrix
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Load dictionary and test data %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
load ('dictionary');
load ('../data/traintest');
filterBank = createFilterBank();


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Load harris corner based classification system and process %%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

load ('visionHarris');

evaluate ( test_imagenames  , ...
           test_labels      , ...
           trainFeatures    , ...
           trainLabels      , ...
           dictionary       , ...
           filterBank       , ...
           'harris'         , ... 
           'euclidean' )

evaluate ( test_imagenames  , ...
           test_labels      , ...
           trainFeatures    , ...
           trainLabels      , ...
           dictionary       , ...
           filterBank       , ...
           'harris'         , ... 
           'chi2'      )


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Load random point based classification and process %%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

load ('visionRandom');

evaluate ( test_imagenames  , ...
           test_labels      , ...
           trainFeatures    , ...
           trainLabels      , ...
           dictionary       , ...
           filterBank       , ...
           'random'         , ... 
           'euclidean' )

evaluate ( test_imagenames  , ...
           test_labels      , ...
           trainFeatures    , ...
           trainLabels      , ...
           dictionary       , ...
           filterBank       , ...
           'random'         , ... 
           'chi2'      )

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function [ ] = evaluate ( test_image_paths       , ...
                          test_labels            , ...
                          trainFeatures          , ...
                          trainLabels            , ...
                          dictionary             , ...
                          filterBank             , ...
                          point_selection_method , ... 
                          distance_method )

  dictionary_size  = size   ( dictionary , 1 );
  n_images         = length ( test_image_paths );
  results          = zeros  ( n_images , 2 );

  parfor i = 1 : n_images
    img_path = char ( strcat    ( '../data/' , test_image_paths ( i ) ) );
    img      = imread           ( img_path );
    wordMap  = getVisualWords   ( img , dictionary, filterBank );
    h        = getImageFeatures ( wordMap , size ( dictionary , 1 ) );

    %% What training image is closest and what is its label? %%%%%%%%%%%%%%%%%%%
    distances         = getImageDistance ( h , trainFeatures , distance_method );
    [ value , index ] = min              ( distances );
    predicted_label   = trainLabels      ( index );
    actual_label      = test_labels      ( i );

    results ( i , : ) = [ actual_label , predicted_label ];

  end

  confusion_matrix = zeros  ( dictionary_size , dictionary_size );
  for i = 1 : n_images
    actual_label    = results ( i , 1 );
    predicted_label = results ( i , 2 );
    confusion_matrix ( actual_label , predicted_label ) = ...
      1 + confusion_matrix ( actual_label , predicted_label );
  end
  diagonals = sub2ind ( size ( confusion_matrix ) , ...
                        1 : dictionary_size       , ...
                        1 : dictionary_size )

  
  accuracy = sum ( confusion_matrix ( diagonals ) ) / n_images


  cm_file_name = sprintf ( 'confusion_matrix_%s_%s' , ...
                            point_selection_method  , ...
                            distance_method );

  save ( cm_file_name , 'confusion_matrix' );
  fprintf ( 'Confusion Matrix %s %s \n' , ...
             point_selection_method   , ...
             distance_method )
  disp ( confusion_matrix )

end
